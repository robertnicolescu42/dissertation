# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
# input AMPLIFY { globalAuthRule: AuthRule = { allow: public } }
schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Mutation {
  createWorkstations(input: CreateWorkstationsInput!): Workstations
  deleteWorkstations(input: DeleteWorkstationsInput!): Workstations
  updateWorkstations(input: UpdateWorkstationsInput!): Workstations
}

type Query {
  getWorkstations(stationId: String!): Workstations
  listWorkstations(
    filter: TableWorkstationsFilterInput
    limit: Int
    nextToken: String
  ): WorkstationsConnection
}

type Subscription {
  onCreateWorkstations(
    cycleTime: Int
    cycleTimeDelay: Int
    defectCount: Int
    description: String
    stationId: String
  ): Workstations @aws_subscribe(mutations: ["createWorkstations"])
  onDeleteWorkstations(
    cycleTime: Int
    cycleTimeDelay: Int
    defectCount: Int
    description: String
    stationId: String
  ): Workstations @aws_subscribe(mutations: ["deleteWorkstations"])
  onUpdateWorkstations(
    cycleTime: Int
    cycleTimeDelay: Int
    defectCount: Int
    description: String
    stationId: String
  ): Workstations @aws_subscribe(mutations: ["updateWorkstations"])
}

type Workstations {
  cycleTime: Int!
  cycleTimeDelay: Int!
  defectCount: Int!
  description: String
  displayName: String!
  equipmentNumber: String!
  isOeeCalculable: Boolean!
  plantIndex: String!
  productionCount: Int!
  runningTime: Int!
  stationId: String!
}

type WorkstationsConnection {
  items: [Workstations]
  nextToken: String
}

input CreateWorkstationsInput {
  cycleTime: Int!
  cycleTimeDelay: Int!
  defectCount: Int!
  description: String
  displayName: String!
  equipmentNumber: String!
  isOeeCalculable: Boolean!
  plantIndex: String!
  productionCount: Int!
  runningTime: Int!
  stationId: String!
}

input DeleteWorkstationsInput {
  stationId: String!
}

input TableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input TableFloatFilterInput {
  between: [Float]
  contains: Float
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
  notContains: Float
}

input TableIDFilterInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
}

input TableIntFilterInput {
  between: [Int]
  contains: Int
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
  notContains: Int
}

input TableStringFilterInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
}

input TableWorkstationsFilterInput {
  cycleTime: TableIntFilterInput
  cycleTimeDelay: TableIntFilterInput
  defectCount: TableIntFilterInput
  description: TableStringFilterInput
  displayName: TableStringFilterInput
  equipmentNumber: TableStringFilterInput
  isOeeCalculable: TableBooleanFilterInput
  plantIndex: TableStringFilterInput
  productionCount: TableIntFilterInput
  runningTime: TableIntFilterInput
  stationId: TableStringFilterInput
}

input UpdateWorkstationsInput {
  cycleTime: Int
  cycleTimeDelay: Int
  defectCount: Int
  description: String
  displayName: String
  equipmentNumber: String
  isOeeCalculable: Boolean
  plantIndex: String
  productionCount: Int
  runningTime: Int
  stationId: String!
}
